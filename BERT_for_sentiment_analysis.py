# -*- coding: utf-8 -*-
"""BERT for sentiment analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MZtk9UvAe158x8F9sZlbE6ccPJ5aD1UD

## BERT for sentiment analysis using Amazon Reviews data

Cite code source: https://curiousily.com/posts/sentiment-analysis-with-bert-and-hugging-face-using-pytorch-and-python/

## Data Loading
"""

import pandas as pd

pajama_1 = pd.read_csv("Amazon_reviews_Pajama_1.csv", index_col= 0)
pajama_2 = pd.read_csv("Amazon_reviews_Pajama_2.csv", index_col= 0)
Tshirts_1 = pd.read_csv("Amazon_reviews_Tshirts_1.csv", index_col= 0)
Tshirts_2 = pd.read_csv("Amazon_reviews_Tshirts_2.csv", index_col= 0)
jeans_1 = pd.read_csv("Amazon_reviews_jeans_1.csv", index_col= 0)
jeans_3 = pd.read_csv("Amazon_reviews_jeans_3.csv", index_col= 0)
jeans_4 = pd.read_csv("Amazon_reviews_jeans_4.csv", index_col= 0)
shirts_2 = pd.read_csv("Amazon_reviews_shirts_2.csv", index_col= 0)
shoes_1 = pd.read_csv("Amazon_reviews_shoes_1.csv", index_col= 0)
shoes_2 = pd.read_csv("Amazon_reviews_shoes_2.csv", index_col= 0)
sweaters_1 = pd.read_csv("Amazon_reviews_sweaters_1.csv", index_col= 0)

pajama = pd.concat([pajama_1,pajama_2], ignore_index=True)
Tshirts = pd.concat([Tshirts_1,Tshirts_2], ignore_index=True)
jeans = pd.concat([jeans_1,jeans_3,jeans_4], ignore_index=True)
shoes = pd.concat([shoes_1,shoes_2], ignore_index=True)

all_product = pd.concat([pajama, Tshirts, jeans, shoes, shirts_2, sweaters_1], ignore_index=True)

all_product

"""## Data Preprocess"""

all_product_new = all_product.replace({'1.0 out of 5 stars': 1, 
                                   '2.0 out of 5 stars': 2,
                                   '3.0 out of 5 stars': 3,
                                   '4.0 out of 5 stars': 4,
                                   '5.0 out of 5 stars': 5})
all_product_new['reviews'] = all_product_new['reviews'].map(lambda x: str(x)[4:-2])

# convert ratings to sentiment
# ratings <= 2: 0
# ratings = 3: 1
# ratings >= 4: 3
def covert_to_sentiment(rating):
  if rating <= 2:
    return 0
  elif rating == 3:
    return 1
  else:
    return 2

all_product_new['sentiment'] = all_product_new.starRating.apply(covert_to_sentiment)

all_product_new[['reviews', 'sentiment']].to_csv('preprocessed_data.csv')

df = all_product_new[['reviews', 'sentiment']].copy()

"""## BERT

Use transformers version 3.5.1 and torch version 1.4.0
"""

!pip install -qq transformers==3.5.1
!pip install torch==1.4.0

import transformers
from transformers import BertModel, BertTokenizer, AdamW, get_linear_schedule_with_warmup
import torch
import numpy as np
import pandas as pd
import seaborn as sns
from pylab import rcParams
import matplotlib.pyplot as plt
from matplotlib import rc
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report
from collections import defaultdict
from textwrap import wrap
from torch import nn, optim
from torch.utils.data import Dataset, DataLoader

pre_tranined_model = 'bert-base-cased'
tokenizer = BertTokenizer.from_pretrained(pre_tranined_model)

# set MAX_LEN
token_lens = []
for review in df.reviews:
  tokens = tokenizer.encode(review, max_length=512)
  token_lens.append(len(tokens))

sns.distplot(token_lens)
plt.xlim([0, 256])
plt.xlabel('Token count')

# from plot, choose MAX_LEN
MAX_LEN = 100

class AmazonReviewDataset(Dataset):
  def __init__(self, reviews, targets, tokenizer, max_len):
    self.reviews = reviews
    self.targets = targets
    self.tokenizer = tokenizer
    self.max_len = max_len

  def __len__(self):
    return len(self.reviews)

  def __getitem__(self, item):
    review = str(self.reviews[item])
    target = self.targets[item]
    encoding = self.tokenizer.encode_plus(
      review,
      add_special_tokens=True,
      max_length=self.max_len,
      return_token_type_ids=False,
      pad_to_max_length=True,
      return_attention_mask=True,
      return_tensors='pt'
    )

    return {
      'review_text': review,
      'input_ids': encoding['input_ids'].flatten(),
      'attention_mask': encoding['attention_mask'].flatten(),
      'targets': torch.tensor(target, dtype=torch.long)
    }

# train, val, test set split = 70/15/15
df_train, df_test = train_test_split(
  df,
  test_size=0.3,
  random_state= 42
)
df_val, df_test = train_test_split(
  df_test,
  test_size=0.5,
  random_state= 42
)

df_train.shape, df_val.shape, df_test.shape

def create_data_loader(df, tokenizer, max_len, batch_size):
  ds = AmazonReviewDataset(
    reviews = df.reviews.to_numpy(),
    targets = df.sentiment.to_numpy(),
    tokenizer = tokenizer,
    max_len = max_len
  )
  return DataLoader(
    ds,
    batch_size=batch_size,
    num_workers=4
  )

BATCH_SIZE = 16

train_data_loader = create_data_loader(df_train, tokenizer, MAX_LEN, BATCH_SIZE)
val_data_loader = create_data_loader(df_val, tokenizer, MAX_LEN, BATCH_SIZE)
test_data_loader = create_data_loader(df_test, tokenizer, MAX_LEN, BATCH_SIZE)

bert_model = BertModel.from_pretrained(pre_tranined_model, return_dict=False)

class SentimentClassifier(nn.Module):
  def __init__(self, n_classes):
    super(SentimentClassifier, self).__init__()
    self.bert = BertModel.from_pretrained(pre_tranined_model)
    self.drop = nn.Dropout(p=0.3)
    self.out = nn.Linear(self.bert.config.hidden_size, n_classes)

  def forward(self, input_ids, attention_mask):
    _, pooled_output = self.bert(
      input_ids=input_ids,
      attention_mask=attention_mask,
      return_dict=False
    )
    output = self.drop(pooled_output)
    return self.out(output)

class_names = ['negative', 'neutral', 'positive']

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

model = SentimentClassifier(len(class_names))
model = model.to(device)

# suggested hyperparameters tuning
# Batch size: 16, 32
# Learnning rate (Adam): 5e-5, 3e-5, 2e-5
# Number of epochs: 2,3,4


EPOCHS = 10

optimizer = AdamW(model.parameters(), lr=2e-5, correct_bias=False)
total_steps = len(train_data_loader) * EPOCHS

scheduler = get_linear_schedule_with_warmup(
  optimizer,
  num_warmup_steps=0,
  num_training_steps=total_steps
)

loss_fn = nn.CrossEntropyLoss().to(device)

def train_epoch(model, data_loader, loss_fn, optimizer,
                device, scheduler, n_examples):
  model = model.train()

  losses = []
  correct_predictions = 0

  for d in data_loader:
    input_ids = d["input_ids"].to(device)
    attention_mask = d["attention_mask"].to(device)
    targets = d["targets"].to(device)

    outputs = model(
      input_ids=input_ids,
      attention_mask=attention_mask
    )

    _, preds = torch.max(outputs, dim=1)
    loss = loss_fn(outputs, targets)

    correct_predictions += torch.sum(preds == targets)
    losses.append(loss.item())

    loss.backward()
    nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)
    optimizer.step()
    scheduler.step()
    optimizer.zero_grad()

  return correct_predictions.double() / n_examples, np.mean(losses)

def eval_model(model, data_loader, loss_fn, device, n_examples):
  model = model.eval()

  losses = []
  correct_predictions = 0

  with torch.no_grad():
    for d in data_loader:
      input_ids = d["input_ids"].to(device)
      attention_mask = d["attention_mask"].to(device)
      targets = d["targets"].to(device)

      outputs = model(
        input_ids=input_ids,
        attention_mask=attention_mask
      )
      _, preds = torch.max(outputs, dim=1)

      loss = loss_fn(outputs, targets)

      correct_predictions += torch.sum(preds == targets)
      losses.append(loss.item())
      
  return correct_predictions.double() / n_examples, np.mean(losses)

history = defaultdict(list)
best_accuracy = 0
for epoch in range(EPOCHS):
  print(f'Epoch {epoch + 1}/{EPOCHS}')
  print('-' * 10)
  train_acc, train_loss = train_epoch(
    model,
    train_data_loader,
    loss_fn,
    optimizer,
    device,
    scheduler,
    len(df_train)
  )
  print(f'Train loss {train_loss} accuracy {train_acc}')
  val_acc, val_loss = eval_model(
    model,
    val_data_loader,
    loss_fn,
    device,
    len(df_val)
  )
  print(f'Val   loss {val_loss} accuracy {val_acc}')
  print()
  history['train_acc'].append(train_acc)
  history['train_loss'].append(train_loss)
  history['val_acc'].append(val_acc)
  history['val_loss'].append(val_loss)
  if val_acc > best_accuracy:
    torch.save(model.state_dict(), 'best_model_state.bin')
    best_accuracy = val_acc

"""Output

Loss: 0.957

Accuracy: 0.823
"""

plt.plot(history['train_acc'], label='train accuracy')
plt.plot(history['val_acc'], label='validation accuracy')

plt.title('Training history')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend()
plt.ylim([0, 1]);

test_acc, _ = eval_model(
  model,
  test_data_loader,
  loss_fn,
  device,
  len(df_test)
)

test_acc.item()

"""Test Accuracy#

0.818
"""

def get_predictions(model, data_loader):
  model = model.eval()
  review_texts = []
  predictions = []
  prediction_probs = []
  real_values = []
  with torch.no_grad():
    for d in data_loader:
      texts = d["review_text"]
      input_ids = d["input_ids"].to(device)
      attention_mask = d["attention_mask"].to(device)
      targets = d["targets"].to(device)
      outputs = model(
        input_ids=input_ids,
        attention_mask=attention_mask
      )
      _, preds = torch.max(outputs, dim=1)
      review_texts.extend(texts)
      predictions.extend(preds)
      prediction_probs.extend(outputs)
      real_values.extend(targets)
  predictions = torch.stack(predictions).cpu()
  prediction_probs = torch.stack(prediction_probs).cpu()
  real_values = torch.stack(real_values).cpu()
  return review_texts, predictions, prediction_probs, real_values

y_review_texts, y_pred, y_pred_probs, y_test = get_predictions(
  model,
  test_data_loader
)

print(classification_report(y_test, y_pred, target_names=class_names))

def show_confusion_matrix(confusion_matrix):
  hmap = sns.heatmap(confusion_matrix, annot=True, fmt="d", cmap="Blues")
  hmap.yaxis.set_ticklabels(hmap.yaxis.get_ticklabels(), rotation=0, ha='right')
  hmap.xaxis.set_ticklabels(hmap.xaxis.get_ticklabels(), rotation=30, ha='right')
  plt.ylabel('True sentiment')
  plt.xlabel('Predicted sentiment');
  
cm = confusion_matrix(y_test, y_pred)
df_cm = pd.DataFrame(cm, index=class_names, columns=class_names)
show_confusion_matrix(df_cm)

idx = 2
review_text = y_review_texts[idx]
true_sentiment = y_test[idx]
pred_df = pd.DataFrame({
  'class_names': class_names,
  'values': y_pred_probs[idx]
})

print("\n".join(wrap(review_text)))
print()
print(f'True sentiment: {class_names[true_sentiment]}')

sns.barplot(x='values', y='class_names', data=pred_df, orient='h')
plt.ylabel('sentiment')
plt.xlabel('probability')
plt.xlim([0, 1])

